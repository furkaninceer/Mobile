// screens/schedule_screen.dart
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

class ScheduleScreen extends StatefulWidget {
  @override
  _ScheduleScreenState createState() => _ScheduleScreenState();
}

class _ScheduleScreenState extends State<ScheduleScreen> {
  bool _isLoading = true;
  List<Game> _games = [];
  DateTime _selectedDate = DateTime.now();
  late PageController _pageController;
  final DateFormat _dateFormat = DateFormat('d MMMM yyyy', 'tr_TR');
  final DateFormat _dayFormat = DateFormat('E', 'tr_TR');
  final DateFormat _timeFormat = DateFormat('HH:mm');

  @override
  void initState() {
    super.initState();
    _pageController = PageController(initialPage: 0);
    _loadGames();
  }

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }

  Future<void> _loadGames() async {
    // Gerçek uygulamada API'den veri çekilecek
    await Future.delayed(Duration(seconds: 1)); // API çağrısı simülasyonu
    
    // Örnek veri - bugünden itibaren 7 gün için maçlar
    List<Game> allGames = [];
    
    // Her gün için 3-5 maç ekle
    for (int day = 0; day < 7; day++) {
      DateTime gameDate = DateTime.now().add(Duration(days: day));
      int gameCount = 3 + (day % 3); // Her gün 3-5 maç
      
      for (int i = 0; i < gameCount; i++) {
        // Rasgele takımlar ve skorlar (farklı takımlar olsun)
        String homeTeam = _getRandomTeam(i);
        String awayTeam = _getRandomTeam(i + gameCount);
        
        // Eğer bugün ya da geçmiş bir gün ise skor ekle, değilse -1 (maç oynanmamış)
        int homeScore = day <= 0 ? 90 + (i * 5) : -1;
        int awayScore = day <= 0 ? 85 + (i * 6) : -1;
        
        // Maç saati (bugün için geçmiş saat, sonraki günler için 18:00-23:30 arası)
        DateTime gameTime;
        if (day == 0) {
          gameTime = DateTime.now().subtract(Duration(hours: 1 + i));
        } else {
          gameTime = DateTime(
            gameDate.year,
            gameDate.month,
            gameDate.day,
            18 + (i % 5),
            (i * 15) % 60,
          );
        }
        
        Game game = Game(
          id: day * 10 + i,
          homeTeam: homeTeam,
          homeTeamAbbr: _getTeamAbbreviation(homeTeam),
          awayTeam: awayTeam,
          awayTeamAbbr: _getTeamAbbreviation(awayTeam),
          homeScore: homeScore,
          awayScore: awayScore,
          date: gameDate,
          time: gameTime,
          venue: 'Arena ${i + 1}',
          isLive: day == 0 && i == 0, // Sadece ilk maç canlı olsun
        );
        
        allGames.add(game);
      }
    }
    
    if (mounted) {
      setState(() {
        _games = allGames;
        _isLoading = false;
      });
    }
  }

  String _getRandomTeam(int seed) {
    List<String> teams = [
      'Boston Celtics',
      'Los Angeles Lakers',
      'Golden State Warriors',
      'Milwaukee Bucks',
      'Phoenix Suns',
      'Denver Nuggets',
      'Miami Heat',
      'Philadelphia 76ers',
      'New York Knicks',
      'Dallas Mavericks',
      'Brooklyn Nets',
      'Chicago Bulls',
      'Los Angeles Clippers',
      'Toronto Raptors',
      'Atlanta Hawks',
    ];
    return teams[seed % teams.length];
  }

  String _getTeamAbbreviation(String teamName) {
    Map<String, String> abbreviations = {
      'Boston Celtics': 'BOS',
      'Los Angeles Lakers': 'LAL',
      'Golden State Warriors': 'GSW',
      'Milwaukee Bucks': 'MIL',
      'Phoenix Suns': 'PHX',
      'Denver Nuggets': 'DEN',
      'Miami Heat': 'MIA',
      'Philadelphia 76ers': 'PHI',
      'New York Knicks': 'NYK',
      'Dallas Mavericks': 'DAL',
      'Brooklyn Nets': 'BKN',
      'Chicago Bulls': 'CHI',
      'Los Angeles Clippers': 'LAC',
      'Toronto Raptors': 'TOR',
      'Atlanta Hawks': 'ATL',
    };
    return abbreviations[teamName] ?? teamName.substring(0, 3).toUpperCase();
  }

  List<Game> _getGamesForDate(DateTime date) {
    return _games.where((game) => 
      game.date.year == date.year && 
      game.date.month == date.month && 
      game.date.day == date.day
    ).toList();
  }

  void _selectDate(int index) {
    setState(() {
      _selectedDate = DateTime.now().add(Duration(days: index));
    });
    _pageController.animateToPage(
      index,
      duration: Duration(milliseconds: 300), 
      curve: Curves.easeInOut,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Maç Programı'),
        centerTitle: true,
        backgroundColor: Theme.of(context).primaryColor,
      ),
      body: _isLoading
          ? Center(child: CircularProgressIndicator())
          : Column(
              children: [
                _buildDateSelector(),
                Divider(height: 1),
                Expanded(
                  child: PageView.builder(
                    controller: _pageController,
                    onPageChanged: (index) {
                      setState(() {
                        _selectedDate = DateTime.now().add(Duration(days: index));
                      });
                    },
                    itemCount: 7,
                    itemBuilder: (context, index) {
                      DateTime date = DateTime.now().add(Duration(days: index));
                      List<Game> gamesForDate = _getGamesForDate(date);
                      
                      return gamesForDate.isEmpty
                          ? Center(child: Text('Bu tarih için maç bulunamadı'))
                          : ListView.separated(
                              padding: EdgeInsets.all(12),
                              itemCount: gamesForDate.length,
                              separatorBuilder: (context, index) => SizedBox(height: 12),
                              itemBuilder: (context, index) {
                                return _buildGameCard(gamesForDate[index]);
                              },
                            );
                    },
                  ),
                ),
              ],
            ),
    );
  }

  Widget _buildDateSelector() {
    return Container(
      height: 100,
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        itemCount: 7,
        itemBuilder: (context, index) {
          DateTime date = DateTime.now().add(Duration(days: index));
          bool isSelected = _selectedDate.day == date.day && 
                           _selectedDate.month == date.month && 
                           _selectedDate.year == date.year;
          
          return GestureDetector(
            onTap: () => _selectDate(index),
            child: Container(
              width: 70,
              margin: EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: isSelected ? Theme.of(context).primaryColor : Colors.transparent,
                borderRadius: BorderRadius.circular(16),
                border: Border.all(
                  color: isSelected ? Theme.of(context).primaryColor : Colors.grey[300]!,
                  width: 2,
                ),
              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    date.day.toString(),
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: isSelected ? Colors.white : Colors.black87,
                    ),
                  ),
                  SizedBox(height: 4),
                  Text(
                    _dayFormat.format(date).toUpperCase(),
                    style: TextStyle(
                      fontSize: 14,
                      color: isSelected ? Colors.white : Colors.black54,
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }

  Widget _buildGameCard(Game game) {
    bool isFinished = game.homeScore >= 0 && game.awayScore >= 0;
    
    return Card(
      elevation: 3,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  game.isLive ? 'CANLI' : isFinished ? 'TAMAMLANDI' : _timeFormat.format(game.time),
                  style: TextStyle(
                    color: game.isLive ? Colors.red : Colors.black54,
                    fontWeight: game.isLive ? FontWeight.bold : FontWeight.normal,
                  ),
                ),
                Text(game.venue, style: TextStyle(color: Colors.grey[600])),
              ],
            ),
            SizedBox(height: 12),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                Expanded(
                  child: Column(
                    children: [
                      Text(
                        game.homeTeamAbbr,
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      SizedBox(height: 4),
                      Text(
                        game.homeTeam,
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.grey[600],
                        ),
                        textAlign: TextAlign.center,
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ],
                  ),
                ),
                Column(
                  children: [
                    if (isFinished || game.isLive)
                      Row(
                        children: [
                          Text(
                            '${game.homeScore}',
                            style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold),
                          ),
                          Text(
                            ' - ',
                            style: TextStyle(fontSize: 28),
                          ),
                          Text(
                            '${game.awayScore}',
                            style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold),
                          ),
                        ],
                      )
                    else
                      Container(
                        padding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                        decoration: BoxDecoration(
                          color: Colors.grey[200],
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: Text(
                          'vs',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.grey[800],
                          ),
                        ),
                      ),
                  ],
                ),
                Expanded(
                  child: Column(
                    children: [
                      Text(
                        game.awayTeamAbbr,
                        style: TextStyle(
                          fontSize: 20,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      SizedBox(height: 4),
                      Text(
                        game.awayTeam,
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.grey[600],
                        ),
                        textAlign: TextAlign.center,
                        maxLines: 1,
                        overflow: TextOverflow.ellipsis,
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

class Game {
  final int id;
  final String homeTeam;
  final String homeTeamAbbr;
  final String awayTeam;
  final String awayTeamAbbr;
  final int homeScore;
  final int awayScore;
  final DateTime date;
  final DateTime time;
  final String venue;
  final bool isLive;

  Game({
    required this.id,
    required this.homeTeam,
    required this.homeTeamAbbr,
    required this.awayTeam,
    required this.awayTeamAbbr,
    required this.homeScore,
    required this.awayScore,
    required this.date,
    required this.time,
    required this.venue,
    this.isLive = false,
  });
}
